name: Build and Release Flutter App

on:
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: "3.22.1"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Maximize build space
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install dependencies
        run: flutter pub get

      - name: Install Ninja (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y ninja-build
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install ninja
          fi

      - name: Install Ninja (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install ninja

      - name: Build Flutter app
        run: flutter build ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'macos' || 'windows' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: |
            build/linux/release/bundle/*,
            build/macos/Build/Products/Release/*.app,
            build/windows/runner/Release/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: build-macos-latest
          path: dist/macos

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: build-ubuntu-latest
          path: dist/linux

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: build-windows-latest
          path: dist/windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos/*.app
          asset_name: macos-${{ github.ref }}.app
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/linux/*
          asset_name: linux-${{ github.ref }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows/*.exe
          asset_name: windows-${{ github.ref }}.exe
          asset_content_type: application/octet-stream
