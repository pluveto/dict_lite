name: Build and Release Flutter App

on:
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: "3.16.2"
  RUST_TOOLCHAIN: "1.70"
  CARGO_MAKE_VERSION: "0.36.6"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    if: github.event.pull_request.draft != true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            flutter_profile: development-linux-x86_64
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            flutter_profile: development-mac-x86_64
            target: x86_64-apple-darwin
          - os: windows-latest
            flutter_profile: development-windows-x86
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}

    steps:
      - name: Maximize build space
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Install Flutter
        id: flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}
          workspaces: |
            frontend/rust-lib
          cache-all-crates: true

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make@${{ env.CARGO_MAKE_VERSION }}, duckscript_cli

      - name: Install prerequisites
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo wget -qO /etc/apt/trusted.gpg.d/dart_linux_signing_key.asc https://dl-ssl.google.com/linux/linux_signing_key.pub
            sudo wget -qO /etc/apt/sources.list.d/dart_stable.list https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list
            sudo apt-get update
            sudo apt-get install -y dart curl build-essential libssl-dev clang cmake ninja-build pkg-config libgtk-3-dev keybinder-3.0 libnotify-dev
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ninja
            vcpkg integrate install
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install ninja
          fi
          cargo make dictlite-flutter-deps-tools
        shell: bash

      - name: Build dictlite
        run: cargo make --profile ${{ matrix.flutter_profile }} dictlite-core-dev

      - name: Run code generation
        run: cargo make code_generation

      - name: Flutter Analyzer
        run: flutter analyze .

      - name: Compress dictlite_flutter
        run: |
          tar -czf dictlite_flutter.tar.gz frontend/dictlite_flutter

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-${{ matrix.os }}
          path: dictlite_flutter.tar.gz

  release:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-macos-latest
          path: dist/macos

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-ubuntu-latest
          path: dist/linux

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-windows-latest
          path: dist/windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos/dictlite_flutter.tar.gz
          asset_name: macos-${{ github.ref }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/linux/dictlite_flutter.tar.gz
          asset_name: linux-${{ github.ref }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows/dictlite_flutter.tar.gz
          asset_name: windows-${{ github.ref }}.tar.gz
          asset_content_type: application/gzip
